// Copyright 2019 Lightbend Inc.
// Copyright 2021 The eigr.io Authors.
// Use of this source code is governed by the Apache License
// that can be found in the LICENSE file.

// Extension for specifying which topics a gRPC endpoint should be connected
// to, in order to facilitate consuming and producing events from a message broker.

syntax = "proto3";

import "google/protobuf/descriptor.proto";

package cloudstate;

option java_package = "io.functions";
option java_multiple_files = true;
option java_outer_classname = "EventsProto";
option go_package = "github.com/eigr/functions-go-sdk/functions;functions";

// Eventing configuration for a gRPC method.
message Eventing {
    // The event source in configuration.
    EventSource in = 1;

    // The event destination out configuration.
    //
    // Optional, if unset, messages out will not be published anywhere.
    EventDestination out = 2;
}

// Event source configuration
message EventSource {

    // The consumer group id.
    //
    // By default, all rpc methods on a given service with the same source will be part of the same virtual consumer
    // group, messages will be routed to the different methods by type. This can be used to override that, if you want
    // multiple methods to act as independent consumers of the same source (ie, if you want the same event to be
    // published to each consumer) then give each consumer a unique name.
    //
    // Note that this does depend on the event source supporting multiple consumer groups. Queue based event sources
    // may not support this.
    string consumer_group = 1;

    oneof source {

        // A topic source.
        //
        // This will consume events from the given topic name.
        string topic = 2;

        // An event log source.
        //
        // This will consume events from the given event log with the given persistence id.
        string event_log = 3;
    }
}

message EventDestination {
    oneof destination {
        string topic = 1;
    }
}

extend google.protobuf.MethodOptions {
    Eventing eventing = 1081;
}
